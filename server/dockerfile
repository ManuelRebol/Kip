# Usamos la version slim ya que es mas liviana
FROM python:3.12-slim

# Configuración de variables de entorno
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Establecer el directorio de trabajo
WORKDIR /app

# --- Capa 1: copiamos sólo requirements para aprovechar caché ---
COPY requirements.txt ./

# ---Capa 2: Instalar dependencias del sistema en un solo Run
RUN apt-get update \
    && apt-get install -y --no-install-recommends gcc libpq-dev build-essential \
    && pip install --no-cache-dir -r requirements.txt \
    && apt-get purge -y --auto-remove gcc libpq-dev build-essential \
    && rm -rf /var/lib/apt/lists/*

# Copiar el resto del código de la aplicación
COPY . .

# Crear el directorio para archivos estáticos
RUN mkdir -p /app/data /app/staticfiles /app/static

# Configurar Django para usar el directorio de archivos estáticos
RUN python manage.py collectstatic --noinput

COPY entrypoint.sh /app/
RUN chmod +x /app/entrypoint.sh

# Exponer el puerto por defecto de Django
EXPOSE 8000

# Usar el script de entrada para iniciar el contenedor
ENTRYPOINT ["/app/entrypoint.sh"]